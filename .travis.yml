---
sudo: required
dist: trusty

#language: python
#python: "2.7"
language: generic

services:
  - docker

env:
  - ROLE: corburn.lxd
  #- ROLE: corburn.nginx
    DISTRIBUTION: ubuntu
    VERSION: 16.04

#addons:
#  apt:
#    sources:
#      - sourceline: 'ppa:ansible/ansible'
#    packages:
#      - ansible

before_install:
  # Pull container
  - 'docker pull ${DISTRIBUTION}:${VERSION}'

  # Customize container
  - 'docker build --rm=true --file=tests/Dockerfile.${DISTRIBUTION}-${VERSION} --tag=${DISTRIBUTION}-${VERSION}:ansible tests'

  - ls -R tests

  # Run container in detached state
  - 'CONTAINER_ID=$(docker run --detach --volume="${PWD}/roles:/etc/ansible/roles:ro" --privileged ${DISTRIBUTION}-${VERSION}:ansible /sbin/init)'
  - 'echo $CONTAINER_ID'

install:
  # Add ansible.cfg to pick up roles path.
  #- "printf '[defaults]\nroles_path = ../' > ansible.cfg"
  # Edit ansible.cfg to pick up roles path relative to the repository root and not the test directory.
  - sed -i 's:^.*roles_path.*:roles_path = ./roles/:' ansible.cfg
  # Connect with basic user instead of root to test privilege escalation.
  # NOTE: This does not check excessive privilege escalation.
  - "sed -i '/- hosts: all/a \\ \\ remote_user: '\"$USER\" roles/${ROLE}/tests/test.yml"

script:
  # Check the role/playbook's syntax.
  - 'docker exec --tty "$CONTAINER_ID" env TERM=xterm ansible-playbook /etc/ansible/roles/${ROLE}/tests/test.yml --syntax-check'

  # Run the role/playbook with ansible-playbook.
  - 'docker exec --tty "$CONTAINER_ID" env TERM=xterm ansible-playbook --connection=local --diff /etc/ansible/roles/${ROLE}/tests/test.yml'

  # Run the role/playbook again, checking to make sure it's idempotent.
  - >
    docker exec --tty "$CONTAINER_ID" env TERM=xterm ansible-playbook --connection=local /etc/ansible/roles/${ROLE}/tests/test.yml
    | grep -q 'changed=0.*failed=0'
    && (echo 'Idempotence test: pass' && exit 0)
    || (echo 'Idempotence test: fail' && exit 1)

  # Clean up
  - 'docker stop "${CONTAINER_ID}"'
